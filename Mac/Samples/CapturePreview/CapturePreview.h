/* -LICENSE-START-
 ** Copyright (c) 2011 Blackmagic Design
 **  
 ** Permission is hereby granted, free of charge, to any person or organization 
 ** obtaining a copy of the software and accompanying documentation (the 
 ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
 ** and transmit the Software, and to prepare derivative works of the Software, 
 ** and to permit third-parties to whom the Software is furnished to do so, in 
 ** accordance with:
 ** 
 ** (1) if the Software is obtained from Blackmagic Design, the End User License 
 ** Agreement for the Software Development Kit (“EULA”) available at 
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 ** 
 ** (2) if the Software is obtained from any third party, such licensing terms 
 ** as notified by that third party,
 ** 
 ** and all subject to the following:
 ** 
 ** (3) the copyright notices in the Software and this entire statement, 
 ** including the above license grant, this restriction and the following 
 ** disclaimer, must be included in all copies of the Software, in whole or in 
 ** part, and all derivative works of the Software, unless such copies or 
 ** derivative works are solely in the form of machine-executable object code 
 ** generated by a source language processor.
 ** 
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 ** DEALINGS IN THE SOFTWARE.
 ** 
 ** A copy of the Software is available free of charge at 
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 ** 
 ** -LICENSE-END-
 */

#import <Cocoa/Cocoa.h>
#include "DeckLinkAPI.h"
#include <vector>

// Forward declarations
class DeckLinkDeviceDiscovery;
class DeckLinkDevice;
class ProfileCallback;

@interface TimecodeStruct : NSObject
{
	NSString* timecode;
	NSString* userBits;
}
@property (copy) NSString* timecode;
@property (copy) NSString* userBits;
@end

@interface MetadataStruct : NSObject
{
	NSString* electroOpticalTransferFunction;
	NSString* displayPrimariesRedX;
	NSString* displayPrimariesRedY;
	NSString* displayPrimariesGreenX;
	NSString* displayPrimariesGreenY;
	NSString* displayPrimariesBlueX;
	NSString* displayPrimariesBlueY;
	NSString* whitePointX;
	NSString* whitePointY;
	NSString* maxDisplayMasteringLuminance;
	NSString* minDisplayMasteringLuminance;
	NSString* maximumContentLightLevel;
	NSString* maximumFrameAverageLightLevel;
	NSString* colorspace;
}
@property (copy) NSString* electroOpticalTransferFunction;
@property (copy) NSString* displayPrimariesRedX;
@property (copy) NSString* displayPrimariesRedY;
@property (copy) NSString* displayPrimariesGreenX;
@property (copy) NSString* displayPrimariesGreenY;
@property (copy) NSString* displayPrimariesBlueX;
@property (copy) NSString* displayPrimariesBlueY;
@property (copy) NSString* whitePointX;
@property (copy) NSString* whitePointY;
@property (copy) NSString* maxDisplayMasteringLuminance;
@property (copy) NSString* minDisplayMasteringLuminance;
@property (copy) NSString* maximumContentLightLevel;
@property (copy) NSString* maximumFrameAverageLightLevel;
@property (copy) NSString* colorspace;
@end

@interface AncillaryDataStruct : NSObject
{
	// VITC timecodes and user bits for field 1 & 2
	TimecodeStruct*	vitcF1;
	TimecodeStruct*	vitcF2;
	
	// RP188 timecodes and user bits (VITC1, VITC2 and LTC)
	TimecodeStruct*	rp188vitc1;
	TimecodeStruct*	rp188vitc2;
	TimecodeStruct*	rp188ltc;
	TimecodeStruct* rp188hfrtc;

	// HDR Metadata
	MetadataStruct* metadata;
}
@property (nonatomic,copy) TimecodeStruct*    vitcF1;
@property (nonatomic,copy) TimecodeStruct*    vitcF2;
@property (nonatomic,copy) TimecodeStruct*    rp188vitc1;
@property (nonatomic,copy) TimecodeStruct*    rp188vitc2;
@property (nonatomic,copy) TimecodeStruct*    rp188ltc;
@property (nonatomic,copy) TimecodeStruct*    rp188hfrtc;
@property (nonatomic,copy) MetadataStruct*    metadata;
@end


@interface CapturePreviewAppDelegate : NSObject <NSApplicationDelegate> {
	NSWindow*						window;
	
	DeckLinkDeviceDiscovery*		deckLinkDiscovery;
	IDeckLinkScreenPreviewCallback*	screenPreviewCallback;
	DeckLinkDevice*					selectedDevice;
	ProfileCallback*				profileCallback;
	BMDVideoConnection				selectedInputConnection;
	
	// The following members store values & labels for the 8 pieces of ancillary data (VITC & RP188 F1/F2 timecodes & user bits) 
	NSMutableArray*					ancillaryDataValues;
	NSArray*						ancillaryDataTypes; 
	
	IBOutlet NSView*				previewView;
	
	IBOutlet NSPopUpButton*			deviceListPopup;
	IBOutlet NSPopUpButton*			inputConnectionPopup;
	IBOutlet NSPopUpButton*			modeListPopup;
	
	IBOutlet NSButton*				startStopButton;
	
	IBOutlet NSTextField*			noValidSource;
	IBOutlet NSButton*				applyDetectedVideoMode;
	IBOutlet NSTableView*			ancillaryDataTable;
}

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification;
- (void)applicationWillTerminate:(NSNotification *)notification;

- (void)showErrorMessage:(NSString*)message title:(NSString*)title;

- (IBAction)toggleStart:(id)sender;
- (IBAction)newDeviceSelected:(id)sender;
- (IBAction)newConnectionSelected:(id)sender;
- (IBAction)toggleApplyDetectionVideoMode:(id)sender;
- (void)enableInterface:(BOOL)enabled;

- (void)refreshInputConnectionList;
- (void)refreshVideoModeList;
- (void)startCapture;
- (void)stopCapture;

- (void)addDevice:(IDeckLink*)deckLink;
- (void)removeDevice:(IDeckLink*)deckLink;

- (void)haltStreams:(IDeckLinkProfile*)newProfile;
- (void)updateProfile:(IDeckLinkProfile*)newProfile;

- (void)updateInputSourceState:(BOOL)state;
- (void)selectDetectedVideoMode:(BMDDisplayMode)newVideoMode;
- (void)setAncillaryData:(AncillaryDataStruct*) latestAncillaryDataValues;
- (void)reloadAncillaryTable;


- (BOOL)shouldRestartCaptureWithNewVideoMode;

// NSTableView delegate
- (id)tableView:(NSTableView *)aTableView objectValueForTableColumn:(NSTableColumn *)aTableColumn row:(NSInteger)rowIndex;
- (NSInteger)numberOfRowsInTableView:(NSTableView *)aTableView;


@property (assign) IBOutlet NSWindow *window;
@property (nonatomic, retain) NSMutableArray* ancillaryDataValues;

@end

namespace
{
	inline bool IsDeviceActive(IDeckLink* deckLink)
	{
		IDeckLinkProfileAttributes*		deckLinkAttributes = NULL;
		int64_t							intAttribute = bmdDuplexInactive;
		
		if (deckLink->QueryInterface(IID_IDeckLinkProfileAttributes, (void**) &deckLinkAttributes) != S_OK)
			return false;
		
		deckLinkAttributes->GetInt(BMDDeckLinkDuplex, &intAttribute);
		deckLinkAttributes->Release();
		
		return ((BMDDuplexMode) intAttribute) != bmdDuplexInactive;
	}
}
