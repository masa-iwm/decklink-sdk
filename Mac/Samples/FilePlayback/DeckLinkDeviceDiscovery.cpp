/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **  
 ** Permission is hereby granted, free of charge, to any person or organization 
 ** obtaining a copy of the software and accompanying documentation (the 
 ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
 ** and transmit the Software, and to prepare derivative works of the Software, 
 ** and to permit third-parties to whom the Software is furnished to do so, in 
 ** accordance with:
 ** 
 ** (1) if the Software is obtained from Blackmagic Design, the End User License 
 ** Agreement for the Software Development Kit (“EULA”) available at 
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 ** 
 ** (2) if the Software is obtained from any third party, such licensing terms 
 ** as notified by that third party,
 ** 
 ** and all subject to the following:
 ** 
 ** (3) the copyright notices in the Software and this entire statement, 
 ** including the above license grant, this restriction and the following 
 ** disclaimer, must be included in all copies of the Software, in whole or in 
 ** part, and all derivative works of the Software, unless such copies or 
 ** derivative works are solely in the form of machine-executable object code 
 ** generated by a source language processor.
 ** 
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 ** DEALINGS IN THE SOFTWARE.
 ** 
 ** A copy of the Software is available free of charge at 
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 ** 
 ** -LICENSE-END-
 */

#include "DeckLinkAPI.h"
#include "DeckLinkDeviceDiscovery.h"

class DeckLinkDeviceDiscovery::Delegate : public IDeckLinkDeviceNotificationCallback
{
public:
	explicit Delegate(DeckLinkDeviceDiscovery& deviceDiscovery);
	virtual ~Delegate();

	// IUnknown
	HRESULT QueryInterface(REFIID iid, LPVOID* ppv) override;
	ULONG AddRef() override;
	ULONG Release() override;

	// IDeckLinkDeviceNotificationCallback
	HRESULT DeckLinkDeviceArrived(IDeckLink *deckLinkDevice) override;
	HRESULT DeckLinkDeviceRemoved(IDeckLink *deckLinkDevice) override;

private:
	std::atomic<ULONG>			m_refCount;
	DeckLinkDeviceDiscovery&	m_deviceDiscovery;
};

DeckLinkDeviceDiscovery::Delegate::Delegate(DeckLinkDeviceDiscovery& deviceDiscovery) :
m_refCount(1),
m_deviceDiscovery(deviceDiscovery)
{
}

DeckLinkDeviceDiscovery::Delegate::~Delegate()
{
}

HRESULT DeckLinkDeviceDiscovery::Delegate::QueryInterface(REFIID iid, LPVOID* ppv)
{
	HRESULT		result		= S_OK;
	CFUUIDBytes	iunknown	= CFUUIDGetUUIDBytes(IUnknownUUID);

	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0)
	{
		*ppv = this;
		AddRef();
	}
	else if (memcmp(&iid, &IID_IDeckLinkDeviceNotificationCallback, sizeof(REFIID)) == 0)
	{
		*ppv = static_cast<IDeckLinkDeviceNotificationCallback*>(this);
		AddRef();
	}
	else
	{
		result = E_NOINTERFACE;
	}

	return result;
}

ULONG DeckLinkDeviceDiscovery::Delegate::AddRef()
{
	return ++m_refCount;
}

ULONG DeckLinkDeviceDiscovery::Delegate::Release()
{
	ULONG refCount = --m_refCount;
	if (refCount == 0)
	{
		delete this;
		return 0;
	}
	return refCount;
}

HRESULT DeckLinkDeviceDiscovery::Delegate::DeckLinkDeviceArrived(IDeckLink *deckLinkDevice)
{
	m_deviceDiscovery.deviceArrived(com_ptr<IDeckLink>(deckLinkDevice));
	return S_OK;
}

HRESULT DeckLinkDeviceDiscovery::Delegate::DeckLinkDeviceRemoved(IDeckLink *deckLinkDevice)
{
	m_deviceDiscovery.deviceRemoved(com_ptr<IDeckLink>(deckLinkDevice));
	return S_OK;
}


// DeckLinkDeviceDiscovery
DeckLinkDeviceDiscovery::DeckLinkDeviceDiscovery() :
m_delegate(new Delegate(*this)),
m_discovery(CreateDeckLinkDiscoveryInstance())
{
}

DeckLinkDeviceDiscovery::~DeckLinkDeviceDiscovery()
{
	stop();
}

void DeckLinkDeviceDiscovery::onDeviceArrival(const Callback& callback)
{
	m_deckLinkArrivedCallback = callback;
}

void DeckLinkDeviceDiscovery::onDeviceRemoval(const Callback& callback)
{
	m_deckLinkRemovedCallback = callback;
}

void DeckLinkDeviceDiscovery::start()
{
    if (m_discovery)
        m_discovery->InstallDeviceNotifications(m_delegate.get());
}

void DeckLinkDeviceDiscovery::stop()
{
   if (m_discovery)
        m_discovery->InstallDeviceNotifications(nullptr);
}

void DeckLinkDeviceDiscovery::deviceArrived(com_ptr<IDeckLink> deckLinkDevice)
{
	if (m_deckLinkArrivedCallback)
		m_deckLinkArrivedCallback(std::move(deckLinkDevice));
}

void DeckLinkDeviceDiscovery::deviceRemoved(com_ptr<IDeckLink> deckLinkDevice)
{
	if (m_deckLinkRemovedCallback)
		m_deckLinkRemovedCallback(std::move(deckLinkDevice));
}
