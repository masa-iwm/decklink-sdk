/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */
#pragma once

#include <functional>
#include "DeckLinkAPI.h"
#include "DeckLinkPlaybackDevice.h"
#include "DeviceManager.h"

@class AppDelegate;

class CocoaViewController
{
public:
	explicit CocoaViewController(AppDelegate* appDelegate);
	virtual ~CocoaViewController();

	void setDeviceManager(std::shared_ptr<DeviceManager> deviceManager);
	void deviceManagerUpdated(com_ptr<DeckLinkPlaybackDevice> device, DeviceManagerStatus status);
	void deviceStateChanged(com_ptr<DeckLinkPlaybackDevice> device, DeviceStatus status);
	void deviceErrorOccurred(com_ptr<DeckLinkPlaybackDevice> device, DeviceError error);

	bool selectDevice(intptr_t deviceID);
	bool updateDevice(com_ptr<DeckLinkPlaybackDevice> device);
	void previewFile(const std::string& filePath, double position);
	void play();
	void stop();
	void setPosition(double position);

private:
	void updateDeviceState(com_ptr<DeckLinkPlaybackDevice> device);
	void updateStreamTime(com_ptr<DeckLinkPlaybackDevice> device);

	std::shared_ptr<DeviceManager>	m_deviceManager;
	BMDTimeValue					m_streamDuration;
	BMDTimeScale					m_timeScale;
	AppDelegate*					m_appDelegate;
};
