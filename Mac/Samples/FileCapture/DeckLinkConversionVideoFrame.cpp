/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **  
 ** Permission is hereby granted, free of charge, to any person or organization 
 ** obtaining a copy of the software and accompanying documentation (the 
 ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
 ** and transmit the Software, and to prepare derivative works of the Software, 
 ** and to permit third-parties to whom the Software is furnished to do so, in 
 ** accordance with:
 ** 
 ** (1) if the Software is obtained from Blackmagic Design, the End User License 
 ** Agreement for the Software Development Kit (“EULA”) available at 
 ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
 ** 
 ** (2) if the Software is obtained from any third party, such licensing terms 
 ** as notified by that third party,
 ** 
 ** and all subject to the following:
 ** 
 ** (3) the copyright notices in the Software and this entire statement, 
 ** including the above license grant, this restriction and the following 
 ** disclaimer, must be included in all copies of the Software, in whole or in 
 ** part, and all derivative works of the Software, unless such copies or 
 ** derivative works are solely in the form of machine-executable object code 
 ** generated by a source language processor.
 ** 
 ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 ** DEALINGS IN THE SOFTWARE.
 ** 
 ** A copy of the Software is available free of charge at 
 ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
 ** 
 ** -LICENSE-END-
 */

#include "DeckLinkConversionVideoFrame.h"

DeckLinkConversionVideoFrame::DeckLinkConversionVideoFrame() :
m_refCount(1),
m_width(0),
m_height(0),
m_rowBytes(0),
m_pixelFormat(bmdModeUnknown),
m_frameFlags(bmdFrameFlagDefault),
m_frameTime(0),
m_frameDuration(0),
m_timeScale(kDefaultConversionTimeScale)
{
}

// IUnknown
HRESULT DeckLinkConversionVideoFrame::QueryInterface(REFIID iid, LPVOID *ppv)
{
	CFUUIDBytes	iunknown;
	HRESULT		result = E_NOINTERFACE;

	*ppv = nullptr;
	iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);

	if (memcmp(&iid, &iunknown, sizeof(REFIID)) == 0)
	{
		*ppv = this;
		AddRef();
		result = S_OK;
	}
	else if (memcmp(&iid, &IID_IDeckLinkVideoFrame, sizeof(REFIID)) == 0)
	{
		*ppv = (IDeckLinkVideoFrame*)this;
		AddRef();
		result = S_OK;
	}

	return result;
}

ULONG DeckLinkConversionVideoFrame::AddRef()
{
	return ++m_refCount;
}

ULONG DeckLinkConversionVideoFrame::Release()
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
	{
		delete this;
		return 0;
	}

	return newRefValue;
}

// IDeckLinkVideoFrame
long DeckLinkConversionVideoFrame::GetWidth()
{
	return m_width;
}

long DeckLinkConversionVideoFrame::GetHeight()
{
	return m_height;
}

long DeckLinkConversionVideoFrame::GetRowBytes()
{
	return m_rowBytes;
}

BMDPixelFormat DeckLinkConversionVideoFrame::GetPixelFormat()
{
	return m_pixelFormat;
}

BMDFrameFlags DeckLinkConversionVideoFrame::GetFlags()
{
	return m_frameFlags;
}

HRESULT DeckLinkConversionVideoFrame::GetBytes(void **buffer)
{
	if (buffer == nullptr || m_frameData.empty())
		return E_FAIL;
	
	*buffer = (void*)m_frameData.data();
	return S_OK;
}

HRESULT DeckLinkConversionVideoFrame::GetTimecode(BMDTimecodeFormat format, IDeckLinkTimecode **timecode)
{
	(void)format;   // unused
	(void)timecode; // unused
	return E_NOTIMPL;
}

HRESULT DeckLinkConversionVideoFrame::GetAncillaryData(IDeckLinkVideoFrameAncillary **ancillary)
{
	(void)ancillary; // unused
	return E_NOTIMPL;
}

// Initialization
bool DeckLinkConversionVideoFrame::init(long width, long height, long rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags frameFlags)
{
	try
	{
		m_frameData.resize(rowBytes * height);
	}
	catch(...)
	{
		return false;
	}

	m_width			= width;
	m_height		= height;
	m_rowBytes		= rowBytes;
	m_pixelFormat	= pixelFormat;
	m_frameFlags	= frameFlags;

	return true;
}
